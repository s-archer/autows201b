#!/bin/bash
# aws
# Script must be non-blocking or run in the background.
mkdir -p /config/cloud
cat << 'EOF' > /config/cloud/startup-script.sh
#!/bin/bash

#############################
# BIG-IPS ONBOARD SCRIPT
#############################
LOG_FILE=${onboard_log}
if [ ! -e $LOG_FILE ]
then
     touch $LOG_FILE
     exec &>>$LOG_FILE
else
    #if file exists, exit as only want to run once
    exit
fi
exec 1>$LOG_FILE 2>&1

#############################
# CHECK TO SEE NETWORK IS READY
#############################
count=0
while true
do
  STATUS=$(curl -s -k -I https://github.com | grep HTTP)
  if [[ $STATUS == *"200"* ]]; then
    echo "internet access check passed"
    break
  elif [ $count -le 6 ]; then
    echo "Status code: $STATUS  Not done yet..."
    count=$[$count+1]
  else
    echo "GIVE UP..."
    break
  fi
  sleep 10
done

#############################
# WAIT FOR BIG-IP SYSTEMS & API TO BE UP
#############################
curl -o /config/cloud/utils.sh -s --fail --retry 60 -m 10 -L https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/develop/scripts/util.sh
. /config/cloud/utils.sh
wait_for_bigip

#############################
# WORKAROUND TO INCREASE MEMORY, TO HANDLE ALL 
# AUTOMATION TOOLCHAIN PKGS
#############################
echo "WORKAROUND TO INCREASE TOOLCHAIN MEMORY"
date
# Modify restjavad memory
echo "Increasing extramb for restjavad"
tmsh modify sys db provision.extramb value 1024
tmsh modify sys db restjavad.useextramb value true
tmsh save sys config
tmsh restart sys service restjavad
echo "WORKAROUND TO INCREASE TOOLCHAIN MEMORY - DONE"


#############################
### SET BIG-IP PASSWORD
#############################
echo "SET THE BIG-IP PASSWORD"
pwd=${password}
if [ -z "$pwd" ]
then
  echo "ERROR: UNABLE TO OBTAIN PASSWORD"
else
  tmsh modify auth user admin password $pwd
fi
#############################
## IAPPS DIR FIX
#############################
# start modify appdata directory size
echo "setting app directory size"
tmsh show sys disk directory /appdata
# 130,985,984 26,128,384 52,256,768
tmsh modify /sys disk directory /appdata new-size 52256768
tmsh show sys disk directory /appdata
echo "done setting app directory size"
tmsh save sys config
# end modify appdata directory size

#############################
### GET ATC VERSIONS & URLS
#############################
## set vars
# constants
rpmInstallUrl="/mgmt/shared/iapp/package-management-tasks"
rpmFilePath="/var/config/rest/downloads"
local_host="http://localhost:8100"
# do
doUrl="/mgmt/shared/declarative-onboarding"
doCheckUrl="/mgmt/shared/declarative-onboarding/info"
doTaskUrl="/mgmt/shared/declarative-onboarding/task"
# as3
as3Url="/mgmt/shared/appsvcs/declare"
as3CheckUrl="/mgmt/shared/appsvcs/info"
as3TaskUrl="/mgmt/shared/appsvcs/task"
# ts
tsUrl="/mgmt/shared/telemetry/declare"
tsCheckUrl="/mgmt/shared/telemetry/info" 
# cloud failover ext
cfUrl="/mgmt/shared/cloud-failover/declare"
cfCheckUrl="/mgmt/shared/cloud-failover/info"
# fast
fastCheckUrl="/mgmt/shared/fast/info"
# vars
mgmt_port=`tmsh list sys httpd ssl-port | grep ssl-port | sed 's/ssl-port //;s/ //g'`
# admin_username='$uname'
admin_password='$pwd'
# CREDS="$admin_username:$admin_password"
CREDS="admin:$admin_password"
toolsList=$(cat -<<END_TOOLS
{
  "tools": [
      {
        "name": "f5-declarative-onboarding",
        "version": "${doVersion}"
      },
      {
        "name": "f5-appsvcs-extension",
        "version": "${as3Version}"
      },
      {
        "name": "f5-telemetry-streaming",
        "version": "${tsVersion}"
      },
      {
        "name": "f5-cloud-failover-extension",
        "version": "${cfVersion}"
      },
      {
        "name": "f5-appsvcs-templates",
        "version": "${fastVersion}"
      }

  ]
}
END_TOOLS
)

#############################
# GET ATC PACKAGES
#############################
echo "GET ATC PACKAGES"
function getAtc () {
atc=$(echo $toolsList | jq -r .tools[].name)
for tool in $atc
do
    version=$(echo $toolsList | jq -r ".tools[]| select(.name| contains (\"$tool\")).version")
    if [ $version == "latest" ]; then
        path=''
    else
        path='tags/v'
    fi
    echo "downloading $tool, $version"
    if [ $tool == "f5-new-tool" ]; then
        files=$(/usr/bin/curl -sk --interface mgmt https://api.github.com/repos/f5devcentral/$tool/releases/$path$version | jq -r '.assets[] | select(.name | contains (".rpm")) | .browser_download_url')
    else
        files=$(/usr/bin/curl -sk --interface mgmt https://api.github.com/repos/F5Networks/$tool/releases/$path$version | jq -r '.assets[] | select(.name | contains (".rpm")) | .browser_download_url')
    fi
    for file in $files
    do
    echo "download: $file"
    name=$(basename $file )
    # make download dir
    mkdir -p /var/config/rest/downloads
    result=$(/usr/bin/curl -Lsk  $file -o /var/config/rest/downloads/$name)
    done
done
echo "DOWNLOADS COMPLETE"
}
# download the rpms
getAtc
#

#############################
### INSTALL ATC PACKAGES
#############################
echo "INSTALL ATC PACKAGES"
rpms=$(find $rpmFilePath -name "*.rpm" -type f)
echo $rpms
for rpm in $rpms
do
  filename=$(basename $rpm)
  echo "installing $filename"
  if [ -f $rpmFilePath/$filename ]; then
     postBody="{\"operation\":\"INSTALL\",\"packageFilePath\":\"$rpmFilePath/$filename\"}"
     while true
     do
        iappApiStatus=$(curl -i -u "$CREDS"  $local_host$rpmInstallUrl | grep HTTP | awk '{print $2}')
        case $iappApiStatus in 
            404)
                echo "api not ready status: $iappApiStatus"
                sleep 2
                ;;
            200)
                echo "api ready starting install task $filename"
                install=$(restcurl -u "$CREDS" -X POST -d $postBody $rpmInstallUrl | jq -r .id )
                break
                ;;
              *)
                echo "other error status: $iappApiStatus"
                debug=$(restcurl -u "$CREDS" $rpmInstallUrl)
                echo "ipp install debug: $debug"
                ;;
        esac
    done
  else
    echo " file: $filename not found"
  fi 
  while true
  do
    status=$(restcurl -u "$CREDS" $rpmInstallUrl/$install | jq -r .status)
    case $status in 
        FINISHED)
            # finished
            echo " rpm: $filename task: $install status: $status"
            break
            ;;
        STARTED)
            # started
            echo " rpm: $filename task: $install status: $status"
            ;;
        RUNNING)
            # running
            echo " rpm: $filename task: $install status: $status"
            ;;
        FAILED)
            # failed
            error=$(restcurl -u "$CREDS" $rpmInstallUrl/$install | jq .errorMessage)
            echo "failed $filename task: $install error: $error"
            break
            ;;
        *)
            # other
            debug=$(restcurl -u "$CREDS" $rpmInstallUrl/$install | jq . )
            echo "failed $filename task: $install error: $debug"
            ;;
        esac
    sleep 2
    done
done

#############################
### VALIDATE ATC PKGS
#############################
function checkDO() {
    # Check DO Ready
    count=0
    while [ $count -le 4 ]
    do
    #doStatus=$(curl -i -u "$CREDS" $local_host$doCheckUrl | grep HTTP | awk '{print $2}')
    doStatusType=$(restcurl -u "$CREDS" -X GET $doCheckUrl | jq -r type )
    if [ "$doStatusType" == "object" ]; then
        doStatus=$(restcurl -u "$CREDS" -X GET $doCheckUrl | jq -r .code)
        if [ $? == 1 ]; then
            doStatus=$(restcurl -u "$CREDS" -X GET $doCheckUrl | jq -r .result.code)
        fi
    elif [ "$doStatusType" == "array" ]; then
        doStatus=$(restcurl -u "$CREDS" -X GET $doCheckUrl | jq -r .[].result.code)
    else
        echo "unknown type:$doStatusType"
    fi
    echo "status $doStatus"
    if [[ $doStatus == "200" ]]; then
        #version=$(restcurl -u "$CREDS" -X GET $doCheckUrl | jq -r .version)
        version=$(restcurl -u "$CREDS" -X GET $doCheckUrl | jq -r .[].version)
        echo "Declarative Onboarding $version online "
        break
    elif [[ $doStatus == "404" ]]; then
        echo "DO Status: $doStatus"
        bigstart restart restnoded
        sleep 60
        bigstart status restnoded | grep running
        status=$?
        echo "restnoded:$status"
    else
        echo "DO Status $doStatus"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkAS3() {
    # Check AS3 Ready
    count=0
    while [ $count -le 4 ]
    do
    #as3Status=$(curl -i -u "$CREDS" $local_host$as3CheckUrl | grep HTTP | awk '{print $2}')
    as3Status=$(restcurl -u "$CREDS" -X GET $as3CheckUrl | jq -r .code)
    if  [ "$as3Status" == "null" ] || [ -z "$as3Status" ]; then
        type=$(restcurl -u "$CREDS" -X GET $as3CheckUrl | jq -r type )
        if [ "$type" == "object" ]; then
            as3Status="200"
        fi
    fi
    if [[ $as3Status == "200" ]]; then
        version=$(restcurl -u "$CREDS" -X GET $as3CheckUrl | jq -r .version)
        echo "As3 $version online "
        break
    elif [[ $as3Status == "404" ]]; then
        echo "AS3 Status $as3Status"
        bigstart restart restnoded
        sleep 60
        bigstart status restnoded | grep running
        status=$?
        echo "restnoded:$status"
    else
        echo "AS3 Status $as3Status"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkTS() {
    # Check TS Ready
    count=0
    while [ $count -le 4 ]
    do
    tsStatus=$(curl -si -u "$CREDS" $local_host$tsCheckUrl | grep HTTP | awk '{print $2}')
    if [[ $tsStatus == "200" ]]; then
        version=$(restcurl -u "$CREDS" -X GET $tsCheckUrl | jq -r .version)
        echo "Telemetry Streaming $version online "
        break
    else
        echo "TS Status $tsStatus"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkCF() {
    # Check CF Ready
    count=0
    while [ $count -le 4 ]
    do
    cfStatus=$(curl -si -u "$CREDS" $local_host$cfCheckUrl | grep HTTP | awk '{print $2}')
    if [[ $cfStatus == "200" ]]; then
        version=$(restcurl -u "$CREDS" -X GET $cfCheckUrl | jq -r .version)
        echo "Cloud failover $version online "
        break
    else
        echo "Cloud Failover Status $cfStatus"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkFAST() {
    # Check FAST Ready
    count=0
    while [ $count -le 4 ]
    do
    fastStatus=$(curl -si -u "$CREDS" $local_host$fastCheckUrl | grep HTTP | awk '{print $2}')
    if [[ $fastStatus == "200" ]]; then
        version=$(restcurl -u "$CREDS" -X GET $fastCheckUrl | jq -r .version)
        echo "FAST $version online "
        break
    else
        echo "FAST Status $fastStatus"
        count=$[$count+1]
    fi
    sleep 10
    done
}
#############################
### CHECK ATC APIS ARE UP
#############################
function checkATC() {
    doStatus=$(checkDO)
    as3Status=$(checkAS3)
    tsStatus=$(checkTS)
    cfStatus=$(checkCF)
    fastStatus=$(checkFAST)
    if [[ $doStatus == *"online"* ]] && [[ "$as3Status" = *"online"* ]] && [[ $tsStatus == *"online"* ]] && [[ $cfStatus == *"online"* ]] && [[ $cfStatus == *"online"* ]] ; then 
        echo "ATC is ready to accept API calls"
    else
        echo "ATC install failed or ATC is not ready to accept API calls"
        break
    fi   
}
checkATC

#############################
### CLEAN UP AND FINISH
#############################
rm /config/cloud/startup-script.sh 
date
echo "FINISHED STARTUP SCRIPT"
EOF
# Now run in the background to not block startup
chmod 755 /config/cloud/startup-script.sh 
nohup /config/cloud/startup-script.sh &